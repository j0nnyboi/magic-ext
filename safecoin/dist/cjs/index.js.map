{"version":3,"file":"index.js","sources":["../../src/type.ts","../../src/index.ts"],"sourcesContent":["export interface SolanaConfig {\n  rpcUrl: string;\n}\n\nexport enum SolanaPayloadMethod {\n  SignTransaction = 'sol_signTransaction',\n  SendTransaction = 'sol_sendTransaction',\n}\n\nexport interface SerializeConfig {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n}\n","import { Extension } from '@magic-sdk/commons';\n\n/* eslint-disable no-param-reassign, array-callback-return */\nimport { SolanaConfig, SolanaPayloadMethod, SerializeConfig } from './type';\n\nexport class SolanaExtension extends Extension.Internal<'solana', any> {\n  name = 'solana' as const;\n  config: any = {};\n\n  constructor(public solanaConfig: SolanaConfig) {\n    super();\n\n    this.config = {\n      rpcUrl: solanaConfig.rpcUrl,\n      chainType: 'SOLANA',\n    };\n  }\n\n  public sendAndConfirmTransaction = (transaction: any, options?: any) => {\n    const { instructions } = transaction;\n\n    instructions.map((instruction: any) => {\n      instruction.programId = instruction.programId.toBase58();\n    });\n\n    return this.request({\n      id: 42,\n      jsonrpc: '2.0',\n      method: SolanaPayloadMethod.SendTransaction,\n      params: {\n        instructions,\n        options,\n      },\n    });\n  };\n\n  public signTransaction = (transaction: any, serializeConfig?: SerializeConfig) => {\n    const { instructions } = transaction;\n\n    const magicInstructions = instructions.map((i: any) => {\n      return {\n        ...i,\n        keys: i.keys.map((k: any) => {\n          return { ...k, pubkey: k.pubkey.toBase58() };\n        }),\n        programId: i.programId.toBase58(),\n      };\n    });\n\n    const params = {\n      feePayer: transaction.feePayer.toBase58(),\n      instructions: magicInstructions,\n      recentBlockhash: transaction.recentBlockhash,\n      serializeConfig,\n    };\n\n    return this.request({\n      id: 42,\n      jsonrpc: '2.0',\n      method: SolanaPayloadMethod.SignTransaction,\n      params,\n    });\n  };\n}\n"],"names":["SolanaPayloadMethod","solanaConfig","_this","name","config","sendAndConfirmTransaction","transaction","options","instructions","map","instruction","programId","toBase58","request","id","jsonrpc","method","SendTransaction","params","signTransaction","serializeConfig","magicInstructions","i","keys","k","pubkey","feePayer","recentBlockhash","SignTransaction","rpcUrl","chainType","Extension","Internal"],"mappings":"IAIYA,8UAAZ,SAAYA,GACVA,wCACAA,wCAFF,CAAYA,IAAAA,mDCKV,WAAmBC,gBACjBC,sBADiBD,sBAHnBE,KAAO,WACPC,OAAc,KAWPC,0BAA4B,SAACC,EAAkBC,GACpD,IAAQC,EAAiBF,EAAjBE,aAMR,OAJAA,EAAaC,IAAI,SAACC,GAChBA,EAAYC,UAAYD,EAAYC,UAAUC,eAGpCC,QAAQ,CAClBC,GAAI,GACJC,QAAS,MACTC,OAAQhB,EAAoBiB,gBAC5BC,OAAQ,CACNV,aAAAA,EACAD,QAAAA,QAKCY,gBAAkB,SAACb,EAAkBc,GAC1C,IAEMC,EAFmBf,EAAjBE,aAE+BC,IAAI,SAACa,GAC1C,YACKA,GACHC,KAAMD,EAAEC,KAAKd,IAAI,SAACe,GAChB,YAAYA,GAAGC,OAAQD,EAAEC,OAAOb,eAElCD,UAAWW,EAAEX,UAAUC,eAIrBM,EAAS,CACbQ,SAAUpB,EAAYoB,SAASd,WAC/BJ,aAAca,EACdM,gBAAiBrB,EAAYqB,gBAC7BP,gBAAAA,GAGF,SAAYP,QAAQ,CAClBC,GAAI,GACJC,QAAS,MACTC,OAAQhB,EAAoB4B,gBAC5BV,OAAAA,KAnDehB,eAAAD,EAGjBC,EAAKE,OAAS,CACZyB,OAAQ5B,EAAa4B,OACrBC,UAAW,YATjB,0FAAqCC,YAAUC"}